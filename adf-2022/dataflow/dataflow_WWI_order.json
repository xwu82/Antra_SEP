{
	"name": "dataflow_WWI_order",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesOrdersCSV",
						"type": "DatasetReference"
					},
					"name": "SalesOrders"
				},
				{
					"dataset": {
						"referenceName": "SalesCustomersCSV",
						"type": "DatasetReference"
					},
					"name": "SalesCustomers"
				},
				{
					"dataset": {
						"referenceName": "SalesOrderLinesCSV",
						"type": "DatasetReference"
					},
					"name": "SalesOrderLines"
				},
				{
					"dataset": {
						"referenceName": "DIMorder",
						"type": "DatasetReference"
					},
					"name": "DIMorder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIMorder",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select3"
				},
				{
					"name": "join2"
				},
				{
					"name": "STGorder"
				},
				{
					"name": "select4"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as string,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as string,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as integer,",
				"          IsUndersupplyBackordered as integer,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SalesOrders",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as string,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as string,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as string,",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as double,",
				"          IsStatementSent as integer,",
				"          IsOnCreditHold as integer,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as integer,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as integer,",
				"          LastEditedBy as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SalesCustomers",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as double,",
				"          TaxRate as double,",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SalesOrderLines",
				"source(output(",
				"          order_key as integer,",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          PhoneNumber as string,",
				"          Description as string,",
				"          Quantity as integer,",
				"          UnitPrice as double,",
				"          TaxRate as double,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as integer,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DIMorder",
				"SalesOrders select(mapColumn(",
				"          OrderID,",
				"          CustomerID,",
				"          SalespersonPersonID,",
				"          PickedByPersonID,",
				"          ContactPersonID,",
				"          BackorderOrderID,",
				"          OrderDate,",
				"          ExpectedDeliveryDate,",
				"          CustomerPurchaseOrderNumber,",
				"          PickingCompletedWhen,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SalesCustomers select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PhoneNumber,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 join(select1@CustomerID == select2@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          OrderID,",
				"          CustomerID = select1@CustomerID,",
				"          CustomerName,",
				"          OrderDate,",
				"          ExpectedDeliveryDate,",
				"          CustomerPurchaseOrderNumber,",
				"          PhoneNumber,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3, SalesOrderLines join(select3@OrderID == SalesOrderLines@OrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          OrderID = select3@OrderID,",
				"          CustomerID,",
				"          CustomerName,",
				"          PhoneNumber,",
				"          Description,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          OrderDate,",
				"          ExpectedDeliveryDate,",
				"          CustomerPurchaseOrderNumber,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> STGorder",
				"DIMorder select(mapColumn(",
				"          Dimorder_key = order_key,",
				"          DimOrderID = OrderID,",
				"          DimCustomerID = CustomerID,",
				"          DimCustomerName = CustomerName,",
				"          DimPhoneNumber = PhoneNumber,",
				"          DimDescription = Description,",
				"          DimQuantity = Quantity,",
				"          DimUnitPrice = UnitPrice,",
				"          DimTaxRate = TaxRate,",
				"          DimOrderDate = OrderDate,",
				"          DimExpectedDeliveryDate = ExpectedDeliveryDate,",
				"          DimCustomerPurchaseOrderNumber = CustomerPurchaseOrderNumber,",
				"          DimDeliveryAddressLine1 = DeliveryAddressLine1,",
				"          DimDeliveryAddressLine2 = DeliveryAddressLine2,",
				"          DimDeliveryPostalCode = DeliveryPostalCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"STGorder, select4 lookup(CustomerID == DimOrderID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(DimOrderID),",
				"     disjoint: false) ~> split1@(New, Exist)",
				"split1@New derive(isactiveinsert = 1) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_key as integer,",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          PhoneNumber as string,",
				"          Description as string,",
				"          Quantity as integer,",
				"          UnitPrice as double,",
				"          TaxRate as double,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as integer,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrderID,",
				"          CustomerID,",
				"          CustomerName,",
				"          PhoneNumber,",
				"          Description,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          OrderDate,",
				"          ExpectedDeliveryDate,",
				"          CustomerPurchaseOrderNumber,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode",
				"     )) ~> sink4"
			]
		}
	}
}